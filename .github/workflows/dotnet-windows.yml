name: Windows

on:
  # Allow to use "gh.exe workflow run Windows --ref <branchname>" to trigger this workflow for arbitrary branches.
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]
        dotnet-version: ['8.0.x']
        tfm: ['net8.0', 'net481']

    runs-on: windows-latest

    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # avoid shallow clone so that nbgv can do its work.

    - name: Setup .NET (64 bit)
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    #- name: List Runtimes 64 bit
    #  run: cmd /c "C:\Program Files\dotnet\dotnet.exe" --list-runtimes
    #- name: List Runtimes 32 bit
    #  run: cmd /c "C:\Program Files (x86)\dotnet\dotnet.exe" --list-runtimes

    - name: Build
      run: >
        dotnet build 
        --framework ${{ matrix.tfm }}
        --configuration ${{ matrix.configuration }}

    - name: Test
      run: >
        dotnet test
        --no-build
        --framework ${{ matrix.tfm }} 
        --collect "Code Coverage;Format=Cobertura"
        --verbosity normal
        --configuration ${{ matrix.configuration }} 
        --logger trx 
        --results-directory "TestResults-${{ matrix.tfm }}-${{ matrix.configuration }}"

    - name: Generage coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.11
      with:
        reports: '${{ github.workspace }}/TestResults-${{ matrix.tfm }}-${{ matrix.configuration }}/**/*.cobertura.xml'
        targetdir: '${{ github.workspace }}/coveragereport'
        reporttypes: 'MarkdownSummaryGithub'
        assemblyfilters: '-*.Tests;-LCTestTarget*'
        filefilters: '-*Linux*'
        title: 'Results for ${{ matrix.tfm }}, ${{ matrix.configuration }}'
        tag: '${{ github.run_number }}_${{ github.run_id }}'
  
    - name: Add coverage report to summary
      run: cat $GITHUB_WORKSPACE/coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Upload dotnet test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.tfm }}-${{ matrix.configuration }}
        path: TestResults-${{ matrix.tfm }}-${{ matrix.configuration }}
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}