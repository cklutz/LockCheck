name: DotNet Reusable Workflow

on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
      dotnet-version:
        required: true
        type: string
      configuration:
        required: true
        type: string
      tfm:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}

    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      LC_COVERAGE_EXCLUDE_CLASS_FILTER: ""

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # avoid shallow clone so that nbgv can do its work.

    - name: Setup .NET (64 bit)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Build
      run: >
        dotnet build 
        --framework ${{ inputs.tfm }}
        --configuration ${{ inputs.configuration }}

    - name: Test
      run: >
        dotnet test
        --no-build
        --framework ${{ inputs.tfm }} 
        --collect "Code Coverage;Format=Cobertura"
        --verbosity normal
        --configuration ${{ inputs.configuration }} 
        --logger trx 
        --results-directory "TestResults-${{ inputs.tfm }}-${{ inputs.configuration }}"

    - name: Prepare coverage settings
      run: |
        shopt -s nocasematch
        if [[ "${{ inputs.runs-on }}" == *"windows"* ]]; then
          echo "LC_COVERAGE_EXCLUDE_CLASS_FILTER=-*.Linux.*" >> "$GITHUB_ENV"
        elif [[ "${{ inputs.runs-on }}" == *"ubuntu"* ]]; then
          echo "LC_COVERAGE_EXCLUDE_CLASS_FILTER=-*.Windows.*" >> "$GITHUB_ENV"
        fi
      shell: bash

    - name: Generage coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.11
      with:
        reports: '${{ github.workspace }}/TestResults-${{ inputs.tfm }}-${{ inputs.configuration }}/**/*.cobertura.xml'
        targetdir: '${{ github.workspace }}/coveragereport'
        reporttypes: 'Html;Html_Dark;Cobertura;MarkdownSummaryGithub;Badges;JsonSummary'
        assemblyfilters: '-*.Tests;-LCTestTarget*'
        classfilters: '${{ env.LC_COVERAGE_EXCLUDE_CLASS_FILTER }}'
        title: 'Results for ${{ inputs.tfm }}, ${{ inputs.configuration }}'
        tag: '${{ github.run_number }}_${{ github.run_id }}'
      if: ${{ inputs.configuration == 'Release' }}
  
    - name: Add coverage report to summary
      run: cat $GITHUB_WORKSPACE/coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
      shell: bash
      if: ${{ inputs.configuration == 'Release' }}

    - name: Update CodeCoverage badge
      run: |
        chmod +rx .github/workflows/update_gist.sh
        .github/workflows/update_gist.sh 9bd61dea93406219c4985641039c4e2f code-coverage-windows-${{ inputs.tfm }}-${{ inputs.configuration }}.svg $GITHUB_WORKSPACE/coveragereport/badge_combined.svg
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.BADGE_GIST_TOKEN }}
      if: ${{ github.ref_name == 'master' && inputs.configuration == 'Release' }}

    - name: Upload dotnet test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ inputs.tfm }}-${{ inputs.configuration }}
        path: |
          TestResults-${{ inputs.tfm }}-${{ inputs.configuration }}
          coveragereport
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}